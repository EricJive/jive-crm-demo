{"version":3,"sources":["crm.png","components/ClickToCall.js","api.js","components/Contact.js","components/AllContacts.js","components/LineSelect.js","components/Settings.js","components/Home.js","components/RedirectURI.js","components/Logout.js","components/MyWindowPortal.js","components/Login.js","components/Counter.js","components/CallPop.js","components/MessageParser.js","components/WebSock.js","components/CallBox.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ClickToCall","number","console","log","headers","Content-Type","Authorization","localStorage","getItem","line","reqBody","JSON","stringify","dialString","from","lineId","axios","post","then","response","catch","error","alert","button","_this","this","react_default","a","createElement","title","className","onClick","sendCall","props","type","React","Component","ContactAPI","contacts","contactId","firstname","lastname","phone","all","get","id","find","Contact","contact","parseInt","match","params","components_ClickToCall","AllContacts","map","key","Link","to","concat","LineSelect","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","multipleLines","subscribeLine","bind","assertThisInitialized","changeLine","organizationID","url","token","lineNumber","lineID","accountID","entity","account","data","status","selectedLine","lines","document","getElementById","value","selectedIndex","setItem","parse","items","organization","options","length","setState","selectBox","add","Option","disabled","i","l","option","toString","name","buildOptions","getSession","ws","subscriptions","self","onChange","Settings","username","userInfo","showLineSelect","clear","_this2","getLineInfo","lineSelector","components_LineSelect","Home","RedirectURI","isLoggedIn","stringArray","location","hash","split","replace","toggleLogin","PureComponent","Logout","Redirect","MyWindowPortal","containerEl","externalWindow","window","open","body","appendChild","close","ReactDOM","createPortal","children","Login","showWindowPortal","toggleWindowPortal","timerID","setInterval","checkForLogin","clearInterval","objectSpread","components_MyWindowPortal","Counter","timer","counterActive","interval","setTimer","incrementTime","secs","sec_num","Math","floor","v","filter","join","callEnded","stopTimer","toHHMMSS","CallPop","isPaneOpen","callComplete","callStarted","callCount","Modal","setAppElement","el","clearPop","chackForCallEnd","_this3","callData","ref","react_sliding_pane_default","closeIcon","isOpen","closeTimeoutMS","width","onRequestClose","closePane","components_Counter","MessageParser","frames","keepalivesCount","clearFrames","UNIX_timestamp","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","substr","result","currentTime","timestamp","timeOfMessage","callerID","message","display","created","popref","openPane","direction","unixtimestamp","getTime","timeConverter","newMessage","processSocketMessage","toConsumableArray","list","item","socketopen","components_CallPop","WebSock","showSocket","currentMessage","lineSubscribed","keepAliveTimer","ext","mpref","handleData","checkForFrames","removeItem","toggleSocket","reconnect","_this4","_this5","checkForWS","_this6","build_default","onMessage","components_MessageParser","CallBox","evt","target","pattern","maxLength","placeholder","updateInputValue","Main","loggedIn","socketOpen","components_CallBox","src","logo","alt","Switch","Route","exact","path","component","render","components_Settings","assign","components_Login","components_Logout","components_RedirectURI","components_WebSock","App","components_Main","Boolean","hostname","BrowserRouter","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f2ef7c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crm.db70d5c8.png\";","import React from 'react';\nimport axios from 'axios';\n\n\nclass ClickToCall extends React.Component {\n \n    sendCall(number) {\n  \n      console.log('Attempting to call ' + number);\n\n      var token = localStorage.getItem('token');\n      \n      var headers = {\n\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + token\n      };\n\n      var line = localStorage.getItem('selectedLineID');\n\n      var reqBody = JSON.stringify(\n        {\n            dialString : number,\n            from : {\n                lineId : line\n            }\n        }\n      )\n\n      axios.post('https://api.jive.com/calls/v2/calls',reqBody,{headers: headers})\n      .then(response => { \n        console.log(response)\n      })\n      \n      .catch(error => {\n          console.log(error);\n          alert(\"An error occurred, Call request failed. Please try again later or logout from Jive\");\n      });\n\n    };\n\n    \n  \n    render(){\n\n      let button;\n\n      if (localStorage.getItem('selectedLine') && localStorage.getItem('token')) {\n        button = <button title='Click to Call' className='call' onClick={() => this.sendCall(this.props.dialString)} type='button'></button> ;\n      }\n\n      else {\n        button = <button className='nocall'type='button' title='Calling Disabled, Check Settings'></button> ;\n      }\n\n      return (\n           <div className='callbtn'>{button}</div>\n      )\n    }\n  \n  };\n  \n  export default ClickToCall;","//Simulates getting contacts from an API\nconst ContactAPI = {\n    contacts: [\n        {\n            contactId: 0,\n            firstname: \"Ben\",\n            lastname: \"Solo\",\n            phone: \"801-373-9120\"\n        },\n        {\n            contactId: 1,\n            firstname: \"John\",\n            lastname: \"Smith\",\n            phone: \"385-440-0115\"\n        },\n        {\n            contactId: 2,\n            firstname: \"Sally\",\n            lastname: \"Jones\",\n            phone: \"877-548-3003\"\n        }\n\n    ],\n    all: function() { return this.contacts},\n    get: function(id) {\n      const isContact = p => p.contactId === id\n      return this.contacts.find(isContact)\n    }\n  }\n  \n  export default ContactAPI;\n  ","import React from 'react';\nimport ClickToCall from './ClickToCall';\nimport ContactAPI from '../api';\n\nconst Contact = (props) => {\n\n    const contact = ContactAPI.get(\n        parseInt(props.match.params.number, 10)\n    );\n\n    if (!contact) {\n        return <div className='contact'>Sorry, but no contact was not found</div>\n    }\n\n    return (\n        <div className='contact'>\n            <h3>Contact Info</h3>\n            <p>{contact.firstname} {contact.lastname}</p>  \n            <div className=\"callbox\">\n                <div className='left'>\n                    {contact.phone}\n                </div>\n                <div className='right'>\n                    <ClickToCall dialString={contact.phone}/>\n                </div>\n            </div>\n        </div>\n    )  \n};\n\nexport default Contact;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ContactAPI from '../api';\n\nclass AllContacts extends React.Component {\n    \n    render() {\n      return (\n        <div className=\"allContacts\">\n          <h3>Contacts</h3>\n          <ul>\n              {\n                  ContactAPI.all().map(p => (\n                      <li key={p.contactId}>\n                        <Link to={`/contact/${p.contactId}`}>{p.lastname}, {p.firstname}</Link>\n                      </li>\n                  ))\n              }\n          </ul>\n        </div>\n      )\n    };\n  \n  };\n\n  export default AllContacts;","import React from 'react';\nimport axios from 'axios';\n\nclass LineSelect extends React.Component {\n\n    constructor(props){\n\n        super(props);\n\n        this.state = {\n            multipleLines: false\n        };\n\n        this.subscribeLine = this.subscribeLine.bind(this);\n        this.changeLine = this.changeLine.bind(this);\n    };\n\n    subscribeLine(line, organizationID) {\n\n        var url = localStorage.getItem('subscriptions');\n        var token = localStorage.getItem('token');\n        var lineNumber = localStorage.getItem('selectedLine');\n\n        var lineID = line;\n        var accountID = organizationID;\n\n        console.log('Attempting to subscribe to line ' + lineID);\n\n        var headers = {\n\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        var reqBody = JSON.stringify(\n            [\n                {\n                    id : lineNumber,\n                    type: \"dialog\",\n                    entity : {\n                        id : lineID,\n                        type: \"line\",\n                        account: accountID\n                    }\n                }\n            ]\n        )\n\n        \n\n        axios.post(url,reqBody,{headers: headers})\n        .then(response => { \n            console.log(response.data)\n          })\n        .catch(error => {\n            console.log(error);\n            alert(\"An error occurred, Subscription request failed. Please try again later or logout from Jive\");\n        });\n    }\n\n    getSession() {\n\n        console.log('Getting session info...');\n\n        var token = localStorage.getItem('token');\n\n        var headers = {\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        return axios.post('https://realtime.jive.com/v2/session',null,{headers: headers})\n        .then(response => { \n            console.log(response)\n            return response.data;\n          })\n          \n        .catch(error => {\n            console.log(error);\n            alert(\"An error occurred, Session request failed. Please try again later or logout from Jive\");\n            return error.response.status;\n        });\n    }\n\n    changeLine(){\n\n        var organizationID = '';\n        var lines = '';\n        var selectedLine = '';\n\n        var line = document.getElementById('lineSelect').value;\n        var id = document.getElementById('lineSelect').selectedIndex;\n\n        localStorage.setItem('selectedLineID', line);\n        console.log('LineID changed to ' + line);\n        localStorage.setItem('optionID', id - 1);\n\n        lines = localStorage.getItem('lines');\n        lines = JSON.parse(lines);\n        organizationID = lines.items[id - 1].organization.id;\n        selectedLine = lines.items[id - 1].number;\n        localStorage.setItem('organizationID', organizationID);\n        localStorage.setItem('selectedLine', selectedLine);\n\n        this.subscribeLine(line, organizationID);\n        \n    }\n\n    buildOptions() {\n\n        if(localStorage.getItem('lines')){\n    \n            var options = localStorage.getItem('lines');\n          \n            options = JSON.parse(options);\n\n            var numberOfLines = options.items.length;\n      \n            if (numberOfLines > 1) {\n\n                this.setState({multipleLines: true}, function(){\n\n                    var selectBox = document.getElementById('lineSelect');\n\n                    //default option\n                    selectBox.options.add( new Option(\"Choose your extension\", \"\", true, true) );\n                    selectBox.options[0].disabled = true;\n      \n                    for(var i = 0, l = options.items.length; i < l; i++){\n\n                        var option = options.items[i];\n  \n                        var number = i.toString();\n  \n                        if (number  === localStorage.getItem('optionID')){\n  \n                            selectBox.options.add( new Option(option.name + ' ' + option.number + ' on ' + option.organization.name, option.id, true, true) );\n                        }\n  \n                        else {\n  \n                            selectBox.options.add( new Option(option.name + ' ' + option.number + ' on ' + option.organization.name, option.id) );\n                        }\n  \n                    };\n\n                });\n            }\n        }\n    }\n\n    componentDidMount() {\n\n        this.buildOptions();\n\n        if (!localStorage.getItem('subscriptions')){\n\n            this.getSession().then(data =>{\n\n                localStorage.setItem('ws', data.ws);\n                localStorage.setItem('subscriptions', data.subscriptions);\n                localStorage.setItem('session', data.self);\n                console.log('Session info saved');\n    \n            })\n        }\n    }\n    \n    render(){\n\n        if (this.state.multipleLines) {\n\n            localStorage.setItem('multipleLines', true);\n\n            return (\n                <div>\n                    <select id='lineSelect' onChange={this.changeLine}></select>\n                    <br></br>\n                </div>\n            )\n        }\n\n        else {\n\n            var options = localStorage.getItem('lines');\n          \n            options = JSON.parse(options);\n\n            return <p>{options.items[0].name} {options.items[0].number} on {options.items[0].organization.name}</p>\n        }\n    }\n  \n};\n\nexport default LineSelect;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport LineSelect from './LineSelect';\n\nclass Settings extends React.Component {\n\n  \n  constructor(props){\n\n    super(props);\n    this.token = localStorage.getItem('token');\n    this.username = localStorage.getItem('username');\n    this.userInfo = '';\n    this.organization = '';\n\n    this.state = {\n      showLineSelect : false\n    };\n\n  };\n\n  getLineInfo() {\n\n    var headers = {\n      \"Authorization\": \"Bearer \" + this.token\n    };\n\n    return axios.get('https://api.jive.com/users/v1/users/' + this.username +'/lines',{headers: headers})\n      .then(response => { \n        return response.data;\n      })\n      \n      .catch(error => {\n          alert(\"An error occurred, Request for Line Info failed. Please login to Jive again.\");\n          localStorage.clear();\n          return error.response.status;\n      });\n\n  }\n\n\n  componentWillMount() {\n\n    //If token exists, but we have not gotten the lines yet > get user info\n    if ( localStorage.getItem('token') && !localStorage.getItem('lines')){\n\n      console.log('Getting user info...');\n  \n      this.getLineInfo().then(response => {\n\n        if(response !== 401){\n\n          localStorage.setItem('lines', JSON.stringify(response));\n\n          //If we only have one line\n          if (response.items.length === 1) {\n  \n            //Set first line automatically if it is the only one\n            this.userInfo = response.items[0].id;\n            this.organization = response.items[0].organization.id;\n            localStorage.setItem('selectedLineID', this.userInfo);\n            localStorage.setItem('organizationID', this.organization);\n            localStorage.setItem('selectedLine', response.items[0].number);\n          } \n          this.setState({showLineSelect: true});\n        }\n\n        else {\n          this.setState({showLineSelect: false});\n        }\n\n      });\n    }\n\n    if (localStorage.getItem('lines')) {\n      this.setState({showLineSelect: true});\n    }\n  }\n\n  \n  render() {\n\n    let lineSelector;\n\n    if (this.state.showLineSelect) {\n\n      lineSelector = <LineSelect></LineSelect>;\n    }\n\n    else {\n      lineSelector = <p>Loading...</p>\n    }\n\n    if (localStorage.getItem('token')) {\n\n      return ( \n        \n        <div className=\"settings\">\n          <p>Jive Settings</p> \n          {lineSelector}\n          <br></br>\n          <Link to='/logout'>Logout</Link>\n        </div>\n      )\n    }\n\n    else {\n\n      return (\n        <div className=\"settings\">\n          <Link to='/login'>Login to Jive</Link>\n        </div>\n    )\n  }\n}\n\n};\n\nexport default Settings;","import React from 'react';\nimport { Link } from 'react-router-dom'; \n\nconst Home = () => (\n  <div className=\"home\">\n    <h1>Welcome to the CRM Demo</h1>\n    <Link to='/settings'>Click here or navigate to Settings to get started</Link>\n  </div>\n)\n\nexport default Home","import React from 'react';\n\nclass RedirectURI extends React.PureComponent {\n\n  \n    componentDidMount() {\n\n        if (this.props.isLoggedIn === false) {\n\n            var parameter = this.props.location.hash;\n            var stringArray = [];\n            var token = '';\n            var username = '';\n            var remove = '&type';\n            stringArray = parameter.split('=');\n            token = stringArray[1];\n            token = token.replace(remove,'');\n            username = stringArray[4];\n            localStorage.setItem(\"token\", token);\n            localStorage.setItem('username', username);\n            this.props.toggleLogin();\n        }\n\n    };\n  \n    render() {\n        \n        return (\n            <div className='test'>\n                <p>We have received our token successfully!</p>\n            </div>        \n        )\n    };\n}\n\nexport default RedirectURI;","import React from 'react';\nimport { Redirect } from 'react-router';\n\nclass Logout extends React.Component {\n\n    constructor(props){\n        super(props);\n        console.log('Logout hit')\n        localStorage.clear();\n        this.props.toggleLogin();\n    };\n  \n  \n    render(){\n        \n        return (\n            <div className='logout'>\n                <Redirect to='/settings' />\n            </div>\n        )\n    }\n  \n  };\n  \n  export default Logout;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from 'react-router';\n\nclass MyWindowPortal extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.containerEl = document.createElement('div');\n      this.externalWindow = null;\n    };\n  \n    componentDidMount() {\n\n      //For build\n      this.externalWindow = window.open('https://auth.jive.com/oauth2/v2/grant?response_type=token&client_id=f70359a9-cb00-401d-9ad2-b1fa89657a69&redirect_uri=http://67.207.41.150/jiveauth.php&scope=users.v1.lines.read calls.v2.initiate','window','toolbar=no,menubar=no,resizable=no,height=550,location=no,width=400');\n\n      this.externalWindow.document.body.appendChild(this.containerEl);\n      \n    };\n  \n    componentWillUnmount() {\n  \n      console.log(\"closing login window....\");\n      if (this.externalWindow){\n        this.externalWindow.close();\n      }\n      \n    };\n  \n    render() {\n\n      if (localStorage.getItem('token')) {\n\n        return <Redirect to='/settings' />\n      }\n\n      else {\n\n        return ReactDOM.createPortal(this.props.children, this.containerEl); \n      }\n      \n    };\n}\n\nexport default MyWindowPortal;","import React from 'react';\nimport MyWindowPortal from './MyWindowPortal';\nimport { Redirect } from 'react-router';\n\nclass Login extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showWindowPortal: true\n        };\n\n        this.toggleWindowPortal = this.toggleWindowPortal.bind(this);\n\n        this.timerID = null;\n    };\n\n    checkForLogin(){\n\n        console.log('Check login hit');\n\n        if (localStorage.getItem('token')){\n            this.toggleWindowPortal();\n        }\n    }\n\n\n    componentDidMount() {\n\n        this.timerID = setInterval(\n            () => this.checkForLogin(), 2000\n        );\n    }\n\n    componentWillUnmount(){\n\n        clearInterval(this.timerID);\n    }\n\n    toggleWindowPortal() {\n\n        this.setState(state => ({\n            ...state,\n            showWindowPortal: false\n        }));\n    }\n    \n    render(){\n\n        if (!this.state.showWindowPortal) {\n\n            console.log('Login Redirecting to settings...')\n            return <Redirect to='/settings' />\n        }\n\n        else {\n            console.log(\"Login Portal rendered...\");\n            localStorage.clear();\n            return (\n                <div className='login'>\n                    <p>Logging in...</p>\n                    <div className='test'>\n                        <MyWindowPortal></MyWindowPortal>\n                    </div>\n                </div>\n            )\n        }\n        \n    }\n  \n  };\n\n  export default Login;","import React from 'react';\n\nclass Counter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: 0,\n            counterActive: false\n        };\n\n        this.interval = null;\n\n        this.setTimer = this.setTimer.bind(this);\n        this.incrementTime = this.incrementTime.bind(this);\n    }\n\n\n    setTimer(){\n\n        console.log('setTimer hit');\n\n        this.setState({counterActive: true});\n\n        this.interval = setInterval(\n\n            () => this.incrementTime(), 1000\n        );\n    }\n\n    toHHMMSS(secs) {\n        var sec_num = parseInt(secs, 10)    \n        var hours   = Math.floor(sec_num / 3600) % 24\n        var minutes = Math.floor(sec_num / 60) % 60\n        var seconds = sec_num % 60    \n        return [hours,minutes,seconds]\n            .map(v => v < 10 ? \"0\" + v : v)\n            .filter((v,i) => v !== \"00\" || i > 0)\n            .join(\":\")\n    }\n\n    incrementTime() {\n        console.log('Increment running');\n        this.setState({timer: this.state.timer + 1});\n        if(this.props.callEnded) {\n            this.stopTimer();\n        }\n    }\n\n    stopTimer(){\n\n        clearInterval(this.interval);\n    }\n\n    componentWillUnmount() {\n\n        clearInterval(this.interval);\n    }\n\n    componentDidMount(){\n\n        console.log('Counter component mounted');\n        this.setTimer();\n    }\n\n    render() {\n\n        return (\n            <div>Call Length: {this.toHHMMSS(this.state.timer)}</div>\n        )\n        \n    }\n}\n\nexport default Counter;","import React from \"react\";\nimport Modal from 'react-modal';\nimport SlidingPane from 'react-sliding-pane';\nimport Counter from './Counter';\n\nclass CallPop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isPaneOpen: false,\n            callComplete: false,\n            callStarted: false,\n            callCount: 0\n        };\n\n        this.interval = null;\n    }\n\n    componentDidMount(){\n\n        Modal.setAppElement(this.el);\n    }\n    \n    chackForCallEnd(){\n\n        console.log('CallPop interval running')\n\n        if (this.props.callEnded) {\n            this.setState({callComplete: true, callStarted: false})\n            clearInterval(this.interval);\n        }\n\n    }\n        \n\n    openPane() {\n\n        console.log('Open pane called')\n\n        // Panel is still open, need to clear data or make a new pop\n        if (this.state.isPaneOpen){\n            console.log('Pane is open already')\n            this.setState({isPaneOpen : true}, function() {\n                this.props.clearPop();\n            })\n        }        \n\n        this.setState({ isPaneOpen: true, callStarted: true , callComplete: false, callCount: this.state.callCount + 1});\n\n\n        this.interval = setInterval(\n\n            () => this.chackForCallEnd(), 1000\n        )\n    }\n\n    closePane() {\n        \n        this.setState({ isPaneOpen: false }, function() {\n\n            this.props.clearPop();\n        });\n\n        this.setState({callComplete: false, callCount: 0})\n\n        clearInterval(this.interval);\n        \n    }\n\n    render() {\n\n        console.log('Call pop rendered and calldata:' + this.props.callData)\n\n        return (\n            <div ref={ref => this.el = ref}>\n            <SlidingPane\n                closeIcon={<div className='closePop'></div>}\n                isOpen={ this.state.isPaneOpen }\n                closeTimeoutMS='500'\n                title='Call Information'\n                from='bottom'\n                width='500px'\n                onRequestClose={ () => \n                    this.closePane()\n                }>\n                <div className='callInfo'>{this.props.callData} <Counter  key={this.state.callCount} callEnded={this.state.callComplete} callStarted={this.state.callStarted}></Counter></div>\n            </SlidingPane>\n        </div>\n        )\n    }\n}\n\nexport default CallPop;\n\n","import React from 'react';\nimport CallPop from './CallPop';\n\n\nclass MessageParser extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            frames: [],\n            keepalivesCount: 0,\n            callEnded: false\n        };\n\n        this.clearFrames = this.clearFrames.bind(this);\n    }\n\n    timeConverter(UNIX_timestamp){\n\n        var a = new Date(UNIX_timestamp);\n        var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n        var year = a.getFullYear();\n        var month = months[a.getMonth()];\n        var date = a.getDate();\n        var hour = a.getHours();\n        var min =  '0' + a.getMinutes();\n        var sec = '0' + a.getSeconds();\n        var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min.substr(-2) + ':' + sec.substr(-2) ;\n        return time;\n      }\n\n    clearFrames(){\n\n        console.log('Clear frames called');\n\n        this.setState({frames: [] }, function () {\n\n                console.log('Frames cleared');\n            }\n        );\n        \n    }\n\n    processSocketMessage(result, currentTime, timestamp){\n\n        var message = '';\n        var timeOfMessage;\n        var callerID;\n\n        if (result.data) {\n            callerID = result.data.display;\n            timeOfMessage = result.data.created;\n        }\n    \n        switch (result.type) {\n\n            case \"announce\":\n                if (timeOfMessage && ((currentTime - 100000) < timeOfMessage)) {\n\n                    // Call data already exists \n                    if(this.state.frames.length > 0) {\n\n                        this.clearFrames();\n                    } \n\n                    this.setState({callEnded: false});\n\n                    this.popref.openPane();\n                    \n                    //Handle New Call Announcement\n                    if (result.data.direction === 'recipient') {\n\n                        message = \"New call incoming from \" + callerID + ' @ ' + timestamp;\n                    }\n\n                    else {\n                        message = \"Calling out to \" + callerID+ ' started @ ' + timestamp;\n                    }\n                }\n\n                break;\n\n            case \"replace\":\n                    \n                //Handle replace message \n                var callState = result.data.state;\n                \n                switch (callState) {\n                    // the call represented by this state snapshot is initialized\n                    case 'trying':\n                        //Inbound\n                        if (result.data.direction === 'recipient') {\n                            message = 'Call incoming from ' + callerID + ' is trying to connect';\n                        }\n                        //Outbound\n                        else {\n                            message = 'Call out to ' + callerID + ' is trying to connect';\n                        }\n                        \n                        break;\n\n                    //the call represented by this state snapshot is ringing\n                    case 'early':\n                        message = 'Call is ringing';\n                        \n                        break;\n\n                    //the call represented by this state snapshot is answered / connected\n                    case 'confirmed':\n                        message = \"Call Connected @ \" + timestamp;\n                        break;\n\n                    //No match\n                    default:\n                        message = 'An error occurred';\n                         break;\n                    }\n\n                break;\n\n            case \"withdraw\":\n\n                console.log('Withdraw hit');\n                ///Hande Call End\n                this.setState({callEnded: true}, function (){\n                    console.log('callEnded state set to true')\n                    \n                });\n                message = 'Call ended @ ' + timestamp;\n                break;\n\n            case 'keepalive':\n                //keep alive\n                message = 'keep alive received';\n                break;\n\n            default:\n                console.log('An error occurred');\n                message = '';\n                break;\n        }\n        \n        return message;\n    }\n\n   \n    handleData() {\n\n        console.log('Message parser handling data');\n\n        var date = new Date();\n        var unixtimestamp = date.getTime();\n\n        var timestamp = this.timeConverter(unixtimestamp);\n\n        let result = JSON.parse(this.props.newMessage);\n        var message = '';\n\n        message = this.processSocketMessage(result,unixtimestamp,timestamp);\n        console.log('Message is ' + message)\n\n        //Discard message\n        if(message === '') {\n            console.log('Socket message discarded');\n        }\n\n        //Keep the message\n        else if (message !== 'keep alive received'){\n            \n            this.setState(\n                {frames: [...this.state.frames , message]}\n            );\n\n\n            if (this.state.frames.length > 10) {\n                \n                this.clearFrames();\n            }\n        }\n\n        //Keep alive\n        else {\n            this.setState(\n                {keepalivesCount: this.state.keepalivesCount + 1}\n            );\n        }\n        \n    }\n\n    componentDidMount() {\n\n        console.log('MessageParser Component Moutned');\n    };\n\n  \n    render() {\n\n        console.log('MessageParser rendered');\n\n        var list = this.state.frames.map((item) =>\n\n            <li key={item.toString()}>{item}</li>\n        );\n\n        if (this.props.socketopen){ \n\n            return (\n                \n                <div className='callpop'>\n                    Number of keepalives received: {this.state.keepalivesCount}\n                    <CallPop ref={popref => {this.popref = popref}} callData = {list} clearPop = {this.clearFrames} callEnded = {this.state.callEnded}/>\n                </div>        \n            )\n        }\n\n        else {\n            return <span></span>\n        }\n\n        \n    };\n}\n\nexport default MessageParser;","import React from 'react';\nimport Websocket from 'react-websocket';\nimport axios from 'axios';\nimport MessageParser from './MessageParser';\n\n\nclass WebSock extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n          showSocket: false,\n          currentMessage: '',\n          lineSubscribed: false\n        };\n\n        this.timer = null;\n        this.keepAliveTimer= null;\n    }\n\n    subscribeLine() {\n\n        var url = localStorage.getItem('subscriptions');\n        var token = localStorage.getItem('token');\n        var lineID = localStorage.getItem('selectedLineID');\n        var accountID = localStorage.getItem('organizationID');\n        var ext = localStorage.getItem('selectedLine');\n\n        if (lineID) {\n\n            console.log('Attempting to subscribe to line ' + lineID);\n\n            var headers = {\n\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            };\n\n            var reqBody = JSON.stringify(\n                [\n                    {\n                        id : ext,\n                        type: \"dialog\",\n                        entity : {\n                            id : lineID,\n                            type: \"line\",\n                            account: accountID\n                        }\n                    }\n                ]\n            )\n\n            axios.post(url,reqBody,{headers: headers})\n            .then(response => {\n                console.log(response.data);\n                this.setState({lineSubscribed: true})\n            })\n        }\n    }\n\n    getSession() {\n\n        console.log('Getting session info...');\n\n        var token = localStorage.getItem('token');\n\n        var headers = {\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        return axios.post('https://realtime.jive.com/v2/session',null,{headers: headers})\n        .then(response => { \n            console.log(response)\n            return response.data;\n          })\n          \n        .catch(error => {\n            console.log(error);\n            alert(\"An error occurred, Session request failed. Please try again later or logout from Jive\");\n            return error.response.status;\n        });\n    }\n\n    checkSubscription() {\n\n        console.log('Checking subscription info...');\n\n        var token = localStorage.getItem('token');\n\n        var url = localStorage.getItem('session');\n\n        var headers = {\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        return axios.get(url,{headers: headers})\n        .then(response => { \n            console.log(response)\n            return response.data;\n          })\n          \n        .catch(error => {\n            console.log(error);\n            alert(\"An error occurred, Session info request failed. Please try again later or logout from Jive\");\n            return error.response.status;\n        });\n    }\n\n    handleData(data) {\n\n        // Stop 30 second timer when frame comes in\n\n        clearInterval(this.keepAliveTimer);\n\n        this.setState({currentMessage: data}, function (){\n            this.mpref.handleData();\n\n            //start 30 second timerAGAIN after getting frame from socket\n            console.log('Timer reset');\n            this.keepAliveTimer = setInterval(\n                () => this.checkForFrames(), 35000\n            );\n            \n        });\n    }\n\n    reconnect() {\n\n        console.log('Reconnect function called');\n\n        //Clear the current subscription info\n        localStorage.removeItem('ws');\n        localStorage.removeItem('subscrtiptions');\n\n        //this.checkSubscription().then(response => {\n\n          //  console.log(response.activeSubscriptions);\n        //});\n\n        //Create new session\n        this.getSession().then(data =>{\n\n            localStorage.setItem('ws', data.ws);\n            localStorage.setItem('subscriptions', data.subscriptions);\n            localStorage.setItem('session', data.self);\n            console.log('Session info saved');\n\n        })\n\n        //Create new subscription\n        this.subscribeLine();\n\n    }\n  \n    checkForWS(){\n\n        console.log('Check websocket hit');\n\n        if (localStorage.getItem('ws')){\n            this.toggleSocket();\n        }\n    }\n\n    checkForFrames() {\n\n        console.log('No frames for 35 seconds, requesting new session');\n        this.reconnect()\n\n    }\n\n    toggleSocket() {\n\n        console.log('Toggle Socket hit')\n        this.setState(state => ({\n            ...state,\n            showSocket: true\n\n        }));\n\n        if (!this.state.lineSubscribed) {\n\n            this.subscribeLine()\n        }\n        \n        clearInterval(this.timer);\n\n        this.keepAliveTimer = setInterval(\n            () => this.checkForFrames(), 35000\n        );\n\n    }\n\n    componentDidMount() {\n\n        console.log('WebSocket Component Moutned');\n\n        this.timer = setInterval(\n            () => this.checkForWS(), 5000\n        );\n    };\n\n  \n    render() {\n\n        var url = localStorage.getItem('ws');\n\n        if (url){ \n\n            return (\n                \n                <div className='callpop'>\n                    <Websocket url={url} onMessage={this.handleData.bind(this)} />\n                    <MessageParser ref={mpref => {this.mpref = mpref}} newMessage={this.state.currentMessage} socketopen = {this.state.showSocket}/>\n                </div>        \n            )\n        }\n\n        else {\n            return <span></span>\n        }\n\n        \n    };\n}\n\nexport default WebSock;","import React from 'react';\nimport ClickToCall from './ClickToCall';\n\nclass CallBox extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state ={\n            dialString : 0\n        }\n\n    };\n\n    updateInputValue(evt) {\n\n        this.setState({\n            dialString: evt.target.value\n        })\n    }\n  \n  \n    render(){\n        \n        return (\n            <div className='callbox'>\n                <div className='left'>\n                    <input \n                        type='search' \n                        pattern=\"[0-9]*\"\n                        maxLength='15'\n                        placeholder='Enter number to call...'\n                        onChange={evt => this.updateInputValue(evt)}\n                    ></input>\n                </div>\n                <div className='right'>\n                    <ClickToCall dialString={this.state.dialString}/>\n                </div>\n            </div>\n        )\n    }\n  \n  };\n  \n  export default CallBox;","import React, { Component } from 'react';\nimport logo from '../crm.png';\nimport '../App.css';\nimport Contact from './Contact';\nimport {Switch, Route} from 'react-router-dom';\nimport { Link } from 'react-router-dom'; \nimport AllContacts from './AllContacts';\nimport Settings from './Settings';\nimport Home from './Home';\nimport RedirectURI from './RedirectURI';\nimport Logout from './Logout';\nimport Login from './Login';\nimport WebSock from './WebSock';\nimport CallBox from './CallBox';\n\nclass Main extends Component {\n\n    constructor(props){\n\n        super(props);\n\n        this.state = {\n            loggedIn : false,\n            socketOpen: false\n        };\n\n        this.toggleLogin = this.toggleLogin.bind(this);\n    };\n\n    toggleLogin() {\n        \n        this.setState({loggedIn: !this.state.loggedIn}, function () {});\n\n    }\n\n    toggleSocket() {\n        \n        this.setState({socketOpen: !this.state.socketOpen}, function () {});\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <CallBox></CallBox>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <div className='links'>\n                        <Link to='/'>Home</Link>\n                        <div className='divider'/>\n                        <Link to='/contacts'>Contacts</Link>\n                        <div className='divider'/>\n                        <Link to='/settings'>Settings</Link>\n                    </div>\n                </header>\n                <div className='main'>\n                    <Switch> \n                        <Route exact path='/' component={Home}/>\n                        <Route exact path='/contacts' component={AllContacts}/> \n                        <Route \n                            exact path='/settings' \n                            render={(props) => <Settings {...props} isLoggedIn = {this.state.loggedIn}/>}\n                        />\n                        <Route \n                            exact path='/login' \n                            render={(props) => <Login {...props} isLoggedIn = {this.state.loggedIn} />}\n                        />\n                        <Route path='/contact/:number' component={Contact}/>\n                        <Route \n                            path='/logout' \n                            render={(props) => <Logout {...props} toggleLogin = {this.toggleLogin}/>}\n                        />\n                        <Route \n                            path='/jiveauth.php' \n                            render={(props) => <RedirectURI {...props} isLoggedIn = {this.state.loggedIn} toggleLogin = {this.toggleLogin}/>}\n                        /> \n                    </Switch> \n                </div>\n                <footer className='websocket'>\n                    <WebSock></WebSock>\n                </footer>\n            </div>\n        );\n    }\n};\n\nexport default Main;\n","import React from 'react';\nimport Main from './Main';\nimport '../App.css';\n\n\nconst App = () => (\n\n  <div className='mainapp'>\n    <Main />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}