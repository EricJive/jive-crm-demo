{"version":3,"sources":["crm.png","components/ClickToCall.js","api.js","components/Contact.js","components/AllContacts.js","components/LineSelect.js","components/Settings.js","components/Home.js","components/RedirectURI.js","components/Logout.js","components/MyWindowPortal.js","components/Login.js","components/Counter.js","components/CallPop.js","components/MessageParser.js","components/WebSock.js","components/CallBox.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ClickToCall","number","console","log","headers","Content-Type","Authorization","localStorage","getItem","line","reqBody","JSON","stringify","dialString","from","lineId","axios","post","then","response","catch","error","alert","dialstring","match","button","_this","this","props","fromCallBox","validateDialString","react_default","a","createElement","title","className","onClick","sendCall","type","React","Component","ContactAPI","contacts","contactId","firstname","lastname","phone","all","get","id","find","Contact","contact","parseInt","params","components_ClickToCall","AllContacts","map","key","Link","to","concat","LineSelect","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","multipleLines","subscribeLine","bind","assertThisInitialized","changeLine","organizationID","url","token","lineNumber","lineID","accountID","entity","account","data","status","selectedLine","lines","document","getElementById","value","selectedIndex","setItem","parse","items","organization","options","length","setState","selectBox","add","Option","disabled","i","l","option","toString","name","buildOptions","onChange","Settings","username","userInfo","showLineSelect","clear","_this2","toggleLogin","getLineInfo","lineSelector","components_LineSelect","Home","RedirectURI","isLoggedIn","stringArray","location","hash","split","replace","PureComponent","Logout","socketOpen","toggleSocket","Redirect","MyWindowPortal","containerEl","externalWindow","window","open","body","appendChild","close","ReactDOM","createPortal","children","Login","showWindowPortal","toggleWindowPortal","timerID","setInterval","checkForLogin","clearInterval","objectSpread","components_MyWindowPortal","Counter","timer","counterActive","interval","setTimer","incrementTime","secs","sec_num","Math","floor","v","filter","join","callEnded","stopTimer","toHHMMSS","CallPop","isPaneOpen","callComplete","callStarted","callCount","Modal","setAppElement","el","clearPop","chackForCallEnd","_this3","ref","react_sliding_pane_default","closeIcon","isOpen","closeTimeoutMS","width","onRequestClose","closePane","callData","components_Counter","MessageParser","frames","keepalivesCount","clearFrames","UNIX_timestamp","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","substr","result","currentTime","timestamp","timeOfMessage","callerID","message","display","created","popref","openPane","direction","unixtimestamp","getTime","timeConverter","newMessage","processSocketMessage","toConsumableArray","list","item","socketopen","components_CallPop","WebSock","showSocket","socketConnected","currentMessage","lineSubscribed","retryCount","keepAliveTimer","ext","mpref","handleData","checkForFrames","_this4","removeItem","getSession","ws","subscriptions","self","connectSocket","_this5","_this6","checkForWS","_this7","build_default","onMessage","components_MessageParser","CallBox","evt","target","pattern","maxLength","placeholder","updateInputValue","Main","loggedIn","footer","components_WebSock","components_CallBox","src","logo","alt","Switch","Route","exact","path","component","render","components_Settings","assign","components_Login","components_Logout","components_RedirectURI","App","components_Main","Boolean","hostname","BrowserRouter","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ff3f0d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crm.db70d5c8.png\";","import React from 'react';\nimport axios from 'axios';\n\n\nclass ClickToCall extends React.Component {\n \n    sendCall(number) {\n  \n      console.log('Attempting to call ' + number);\n\n      var token = localStorage.getItem('token');\n      \n      var headers = {\n\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + token\n      };\n\n      var line = localStorage.getItem('selectedLineID');\n\n      var reqBody = JSON.stringify(\n        {\n            dialString : number,\n            from : {\n                lineId : line\n            }\n        }\n      )\n\n      axios.post('https://api.jive.com/calls/v2/calls',reqBody,{headers: headers})\n      .then(response => { \n        console.log(response)\n      })\n      \n      .catch(error => {\n          console.log(error);\n          alert(\"An error occurred, Call request failed. Please try again later or logout from Jive\");\n      });\n\n    };\n\n    validateDialString(dialstring) {\n\n      var phonenoUS = /^(\\([0-9]{3}\\)|[0-9]{3})\\s?-?[0-9]{3}\\s?-?[0-9]{4}\\b/;\n\n      var ext = /^\\+?[0-9]{3,15}$/;\n\n\n      if(dialstring.match(phonenoUS)) {\n\n        return true;\n\n      }  \n\n      else if (dialstring.match(ext)) {\n\n        return true;\n      }\n\n      else {\n\n        return false;\n      }\n    }\n\n    \n  \n    render(){\n\n      let button;\n\n      if (this.props.fromCallBox) {\n\n\n        if (localStorage.getItem('selectedLine') && localStorage.getItem('token')) {\n\n          if (this.validateDialString(this.props.dialString)){\n  \n            button = <button title='Click to Call' className='call' onClick={() => this.sendCall(this.props.dialString)} type='button'></button> ;\n          }\n  \n          else {\n  \n            button = <button className='nocall'type='button' title='Invalid DialString'></button> ;\n          }\n          \n        }\n  \n        else {\n          button = <button className='nocall'type='button' title='Calling Disabled, Check Settings'></button> ;\n        }\n\n      }\n\n      else {\n\n        if (localStorage.getItem('selectedLine') && localStorage.getItem('token')) {\n\n          button = <button title='Click to Call' className='call' onClick={() => this.sendCall(this.props.dialString)} type='button'></button> ;\n          \n        }\n  \n        else {\n          button = <button className='nocall'type='button' title='Calling Disabled, Check Settings'></button> ;\n        }\n    }\n\n    return (\n      <div className='callbtn'>{button}</div>\n    \n      )\n    }\n  \n  };\n  \n  export default ClickToCall;","//Simulates getting contacts from an API\nconst ContactAPI = {\n    contacts: [\n        {\n            contactId: 0,\n            firstname: \"Ben\",\n            lastname: \"Solo\",\n            phone: \"801-373-9120\"\n        },\n        {\n            contactId: 1,\n            firstname: \"John\",\n            lastname: \"Smith\",\n            phone: \"385-440-0115\"\n        },\n        {\n            contactId: 2,\n            firstname: \"Sally\",\n            lastname: \"Jones\",\n            phone: \"877-548-3003\"\n        }\n\n    ],\n    all: function() { return this.contacts},\n    get: function(id) {\n      const isContact = p => p.contactId === id\n      return this.contacts.find(isContact)\n    }\n  }\n  \n  export default ContactAPI;\n  ","import React from 'react';\nimport ClickToCall from './ClickToCall';\nimport ContactAPI from '../api';\n\nconst Contact = (props) => {\n\n    const contact = ContactAPI.get(\n        parseInt(props.match.params.number, 10)\n    );\n\n    if (!contact) {\n        return <div className='contact'>Sorry, but no contact was not found</div>\n    }\n\n    return (\n        <div className='contact'>\n            <h3>Contact Info</h3>\n            <p>{contact.firstname} {contact.lastname}</p>  \n            <div className=\"callbox\">\n                <div className='left'>\n                    {contact.phone}\n                </div>\n                <div className='right'>\n                    <ClickToCall dialString={contact.phone}/>\n                </div>\n            </div>\n        </div>\n    )  \n};\n\nexport default Contact;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ContactAPI from '../api';\n\nclass AllContacts extends React.Component {\n    \n    render() {\n      return (\n        <div className=\"allContacts\">\n          <h3>Contacts</h3>\n          <ul>\n              {\n                  ContactAPI.all().map(p => (\n                      <li key={p.contactId}>\n                        <Link to={`/contact/${p.contactId}`}>{p.lastname}, {p.firstname}</Link>\n                      </li>\n                  ))\n              }\n          </ul>\n        </div>\n      )\n    };\n  \n  };\n\n  export default AllContacts;","import React from 'react';\nimport axios from 'axios';\n\nclass LineSelect extends React.Component {\n\n    constructor(props){\n\n        super(props);\n\n        this.state = {\n            multipleLines: false\n        };\n\n        this.subscribeLine = this.subscribeLine.bind(this);\n        this.changeLine = this.changeLine.bind(this);\n    };\n\n    subscribeLine(line, organizationID) {\n\n        var url = localStorage.getItem('subscriptions');\n        var token = localStorage.getItem('token');\n        var lineNumber = localStorage.getItem('selectedLine');\n\n        var lineID = line;\n        var accountID = organizationID;\n\n        console.log('Attempting to subscribe to line ' + lineID);\n\n        var headers = {\n\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        var reqBody = JSON.stringify(\n            [\n                {\n                    id : lineNumber,\n                    type: \"dialog\",\n                    entity : {\n                        id : lineID,\n                        type: \"line\",\n                        account: accountID\n                    }\n                }\n            ]\n        )\n\n        axios.post(url,reqBody,{headers: headers})\n        .then(response => { \n            console.log(response.data)\n        })\n        .catch(error => {\n            console.log(error);\n            //alert(\"An error occurred, Subscription request failed. Please try again later or logout from Jive\");\n        });\n    }\n\n    getSession() {\n\n        console.log('Getting session info...');\n\n        var token = localStorage.getItem('token');\n\n        var headers = {\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        return axios.post('https://realtime.jive.com/v2/session',null,{headers: headers})\n        .then(response => { \n            console.log(response)\n            return response.data;\n          })\n          \n        .catch(error => {\n            console.log(error);\n            alert(\"An error occurred, Session request failed. Please try again later or logout from Jive\");\n            return error.response.status;\n        });\n    }\n\n    changeLine(){\n\n        var organizationID = '';\n        var lines = '';\n        var selectedLine = '';\n\n        var line = document.getElementById('lineSelect').value;\n        var id = document.getElementById('lineSelect').selectedIndex;\n        var url = localStorage.getItem('subscriptions');\n\n        localStorage.setItem('selectedLineID', line);\n        console.log('LineID changed to ' + line);\n        localStorage.setItem('optionID', id - 1);\n\n        lines = localStorage.getItem('lines');\n        lines = JSON.parse(lines);\n        organizationID = lines.items[id - 1].organization.id;\n        selectedLine = lines.items[id - 1].number;\n        localStorage.setItem('organizationID', organizationID);\n        localStorage.setItem('selectedLine', selectedLine);\n\n        if(url){\n\n            this.subscribeLine(line, organizationID);\n        }\n        \n        \n    }\n\n    buildOptions() {\n\n        if(localStorage.getItem('lines')){\n    \n            var options = localStorage.getItem('lines');\n          \n            options = JSON.parse(options);\n\n            var numberOfLines = options.items.length;\n      \n            if (numberOfLines > 1) {\n\n                this.setState({multipleLines: true}, function(){\n\n                    var selectBox = document.getElementById('lineSelect');\n\n                    //default option\n                    selectBox.options.add( new Option(\"Choose your extension\", \"\", true, true) );\n                    selectBox.options[0].disabled = true;\n      \n                    for(var i = 0, l = options.items.length; i < l; i++){\n\n                        var option = options.items[i];\n  \n                        var number = i.toString();\n  \n                        if (number  === localStorage.getItem('optionID')){\n  \n                            selectBox.options.add( new Option(option.name + ' ' + option.number + ' on ' + option.organization.name, option.id, true, true) );\n                        }\n  \n                        else {\n  \n                            selectBox.options.add( new Option(option.name + ' ' + option.number + ' on ' + option.organization.name, option.id) );\n                        }\n  \n                    };\n\n                });\n            }\n        }\n    }\n\n    componentDidMount() {\n\n        this.buildOptions();\n\n    }\n    \n    render(){\n\n        if (this.state.multipleLines) {\n\n            localStorage.setItem('multipleLines', true);\n\n            return (\n                <div>\n                    <select id='lineSelect' onChange={this.changeLine}></select>\n                    <br></br>\n                </div>\n            )\n        }\n\n        else {\n\n            var options = localStorage.getItem('lines');\n          \n            options = JSON.parse(options);\n\n            return <p>{options.items[0].name} {options.items[0].number} on {options.items[0].organization.name}</p>\n        }\n    }\n  \n};\n\nexport default LineSelect;","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport LineSelect from './LineSelect';\n\nclass Settings extends React.Component {\n\n  \n  constructor(props){\n\n    super(props);\n    this.token = localStorage.getItem('token');\n    this.username = localStorage.getItem('username');\n    this.userInfo = '';\n    this.organization = '';\n\n    this.state = {\n      showLineSelect : false\n    };\n\n  };\n\n  getLineInfo() {\n\n    var headers = {\n      \"Authorization\": \"Bearer \" + this.token\n    };\n\n    return axios.get('https://api.jive.com/users/v1/users/' + this.username +'/lines',{headers: headers})\n      .then(response => { \n        return response.data;\n      })\n      \n      .catch(error => {\n          alert(\"An error occurred, Request for Line Info failed. Please login to Jive again.\");\n          localStorage.clear();\n          return error.response.status;\n      });\n\n  }\n\n\n  componentWillMount() {\n\n    //If token exists, but we have not gotten the lines yet > get user info\n    if ( localStorage.getItem('token') && !localStorage.getItem('lines')){\n\n      this.props.toggleLogin();\n\n      console.log('Getting user info...');\n  \n      this.getLineInfo().then(response => {\n\n        if(response !== 401){\n\n          localStorage.setItem('lines', JSON.stringify(response));\n\n          //If we only have one line\n          if (response.items.length === 1) {\n  \n            //Set first line automatically if it is the only one\n            this.userInfo = response.items[0].id;\n            this.organization = response.items[0].organization.id;\n            localStorage.setItem('selectedLineID', this.userInfo);\n            localStorage.setItem('organizationID', this.organization);\n            localStorage.setItem('selectedLine', response.items[0].number);\n          } \n          this.setState({showLineSelect: true});\n        }\n\n        else {\n          this.setState({showLineSelect: false});\n        }\n\n      });\n    }\n\n    if (localStorage.getItem('lines')) {\n      this.setState({showLineSelect: true});\n    }\n  }\n\n  \n  render() {\n\n    let lineSelector;\n\n    if (this.state.showLineSelect) {\n\n      lineSelector = <LineSelect></LineSelect>;\n    }\n\n    else {\n      lineSelector = <p>Loading...</p>\n    }\n\n    if (localStorage.getItem('token')) {\n\n      return ( \n        \n        <div className=\"settings\">\n          <p>Jive Settings</p> \n          {lineSelector}\n          <br></br>\n          <Link to='/logout'>Logout</Link>\n        </div>\n      )\n    }\n\n    else {\n\n      return (\n        <div className=\"settings\">\n          <Link to='/login'>Login to Jive</Link>\n        </div>\n    )\n  }\n}\n\n};\n\nexport default Settings;","import React from 'react';\nimport { Link } from 'react-router-dom'; \n\nconst Home = () => (\n  <div className=\"home\">\n    <h1>Welcome to the CRM Demo</h1>\n    <Link to='/settings'>Click here or navigate to Settings to get started</Link>\n  </div>\n)\n\nexport default Home","import React from 'react';\n\nclass RedirectURI extends React.PureComponent {\n\n  \n    componentDidMount() {\n\n        if (this.props.isLoggedIn === false) {\n\n            var parameter = this.props.location.hash;\n            var stringArray = [];\n            var token = '';\n            var username = '';\n            var remove = '&type';\n            stringArray = parameter.split('=');\n            token = stringArray[1];\n            token = token.replace(remove,'');\n            username = stringArray[4];\n            localStorage.setItem(\"token\", token);\n            localStorage.setItem('username', username);\n            this.props.toggleLogin();\n        }\n\n    };\n  \n    render() {\n        \n        return (\n            <div className='test'>\n                <p>We have received our token successfully!</p>\n            </div>        \n        )\n    };\n}\n\nexport default RedirectURI;","import React from 'react';\nimport { Redirect } from 'react-router';\n\nclass Logout extends React.Component {\n\n    constructor(props){\n        super(props);\n        console.log('Logout hit')\n        localStorage.clear();\n        this.props.toggleLogin();\n        if (this.props.socketOpen){\n\n            this.props.toggleSocket();\n        }\n        \n    };\n  \n  \n    render(){\n        \n        return (\n            <div className='logout'>\n                <Redirect to='/settings' />\n            </div>\n        )\n    }\n  \n  };\n  \n  export default Logout;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from 'react-router';\n\nclass MyWindowPortal extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.containerEl = document.createElement('div');\n      this.externalWindow = null;\n    };\n  \n    componentDidMount() {\n\n      //For build\n      this.externalWindow = window.open('https://auth.jive.com/oauth2/v2/grant?response_type=token&client_id=f70359a9-cb00-401d-9ad2-b1fa89657a69&redirect_uri=http://67.207.41.150/jiveauth.php&scope=users.v1.lines.read calls.v2.initiate','window','toolbar=no,menubar=no,resizable=no,height=550,location=no,width=400');\n      \n      this.externalWindow.document.body.appendChild(this.containerEl);\n    };\n  \n    componentWillUnmount() {\n  \n      console.log(\"closing login window....\");\n      if (this.externalWindow){\n        this.externalWindow.close();\n      }\n      \n    };\n  \n    render() {\n\n      if (localStorage.getItem('token')) {\n\n        return <Redirect to='/settings' />\n      }\n\n      else {\n\n        return ReactDOM.createPortal(this.props.children, this.containerEl); \n      }\n      \n    };\n}\n\nexport default MyWindowPortal;","import React from 'react';\nimport MyWindowPortal from './MyWindowPortal';\nimport { Redirect } from 'react-router';\n\nclass Login extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showWindowPortal: true\n        };\n\n        this.toggleWindowPortal = this.toggleWindowPortal.bind(this);\n\n        this.timerID = null;\n    };\n\n    checkForLogin(){\n\n        console.log('Check login hit');\n\n        if (localStorage.getItem('token')){\n            this.toggleWindowPortal();\n        }\n    }\n\n\n    componentDidMount() {\n\n        this.timerID = setInterval(\n            () => this.checkForLogin(), 2000\n        );\n    }\n\n    componentWillUnmount(){\n\n        clearInterval(this.timerID);\n    }\n\n    toggleWindowPortal() {\n\n        this.setState(state => ({\n            ...state,\n            showWindowPortal: false\n        }));\n    }\n    \n    render(){\n\n        if (!this.state.showWindowPortal) {\n\n            console.log('Login Redirecting to settings...')\n            return <Redirect to='/settings' />\n        }\n\n        else {\n            console.log(\"Login Portal rendered...\");\n            localStorage.clear();\n            return (\n                <div className='login'>\n                    <p>Logging in...</p>\n                    <div className='test'>\n                        <MyWindowPortal></MyWindowPortal>\n                    </div>\n                </div>\n            )\n        }\n        \n    }\n  \n  };\n\n  export default Login;","import React from 'react';\n\nclass Counter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: 0,\n            counterActive: false\n        };\n\n        this.interval = null;\n\n        this.setTimer = this.setTimer.bind(this);\n        this.incrementTime = this.incrementTime.bind(this);\n    }\n\n\n    setTimer(){\n\n        this.setState({counterActive: true});\n\n        this.interval = setInterval(\n\n            () => this.incrementTime(), 1000\n        );\n    }\n\n    toHHMMSS(secs) {\n\n        var sec_num = parseInt(secs, 10)    \n        var hours   = Math.floor(sec_num / 3600) % 24\n        var minutes = Math.floor(sec_num / 60) % 60\n        var seconds = sec_num % 60    \n        return [hours,minutes,seconds]\n            .map(v => v < 10 ? \"0\" + v : v)\n            .filter((v,i) => v !== \"00\" || i > 0)\n            .join(\":\")\n    }\n\n    incrementTime() {\n        \n        this.setState({timer: this.state.timer + 1});\n        if(this.props.callEnded) {\n            this.stopTimer();\n        }\n    }\n\n    stopTimer(){\n\n        clearInterval(this.interval);\n    }\n\n    componentWillUnmount() {\n\n        clearInterval(this.interval);\n    }\n\n    componentDidMount(){\n\n        this.setTimer();\n    }\n\n    render() {\n\n        return (\n            <div>Call Length: {this.toHHMMSS(this.state.timer)}</div>\n        )\n        \n    }\n}\n\nexport default Counter;","import React from \"react\";\nimport Modal from 'react-modal';\nimport SlidingPane from 'react-sliding-pane';\nimport Counter from './Counter';\n\nclass CallPop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isPaneOpen: false,\n            callComplete: false,\n            callStarted: false,\n            callCount: 0\n        };\n\n        this.interval = null;\n    }\n\n    componentDidMount(){\n\n        Modal.setAppElement(this.el);\n    }\n    \n    chackForCallEnd(){\n\n        if (this.props.callEnded) {\n            this.setState({callComplete: true, callStarted: false})\n            clearInterval(this.interval);\n        }\n\n    }\n        \n\n    openPane() {\n\n        console.log('Open pane called')\n\n        // Panel is still open, need to clear data or make a new pop\n        if (this.state.isPaneOpen){\n\n            this.setState({isPaneOpen : true}, function() {\n                this.props.clearPop();\n            })\n        }        \n\n        this.setState({ isPaneOpen: true, callStarted: true , callComplete: false, callCount: this.state.callCount + 1});\n\n\n        this.interval = setInterval(\n\n            () => this.chackForCallEnd(), 1000\n        )\n    }\n\n    closePane() {\n        \n        this.setState({ isPaneOpen: false }, function() {\n\n            this.props.clearPop();\n        });\n\n        this.setState({callComplete: false, callCount: 0})\n\n        clearInterval(this.interval);\n        \n    }\n\n    render() {\n\n        return (\n            <div ref={ref => this.el = ref}>\n            <SlidingPane\n                closeIcon={<div className='closePop'></div>}\n                isOpen={ this.state.isPaneOpen }\n                closeTimeoutMS='500'\n                title='Call Information'\n                from='bottom'\n                width='500px'\n                onRequestClose={ () => \n                    this.closePane()\n                }>\n                <div className='callInfo'>{this.props.callData} <Counter  key={this.state.callCount} callEnded={this.state.callComplete} callStarted={this.state.callStarted}></Counter></div>\n            </SlidingPane>\n        </div>\n        )\n    }\n}\n\nexport default CallPop;\n\n","import React from 'react';\nimport CallPop from './CallPop';\n\n\nclass MessageParser extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            frames: [],\n            keepalivesCount: 0,\n            callEnded: false\n        };\n\n        this.clearFrames = this.clearFrames.bind(this);\n    }\n\n    timeConverter(UNIX_timestamp){\n\n        var a = new Date(UNIX_timestamp);\n        var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n        var year = a.getFullYear();\n        var month = months[a.getMonth()];\n        var date = a.getDate();\n        var hour = a.getHours();\n        var min =  '0' + a.getMinutes();\n        var sec = '0' + a.getSeconds();\n        var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min.substr(-2) + ':' + sec.substr(-2) ;\n        return time;\n      }\n\n    clearFrames(){\n\n        console.log('Clear frames called');\n\n        this.setState({frames: [] }, function () {\n\n                console.log('Frames cleared');\n            }\n        );\n        \n    }\n\n    processSocketMessage(result, currentTime, timestamp){\n\n        var message = '';\n        var timeOfMessage;\n        var callerID;\n\n        if (result.data) {\n            callerID = result.data.display;\n            timeOfMessage = result.data.created;\n        }\n    \n        switch (result.type) {\n\n            case \"announce\":\n                if (timeOfMessage && ((currentTime - 100000) < timeOfMessage)) {\n\n                    // Call data already exists \n                    if(this.state.frames.length > 0) {\n\n                        this.clearFrames();\n                    } \n\n                    this.setState({callEnded: false});\n\n                    this.popref.openPane();\n                    \n                    //Handle New Call Announcement\n                    if (result.data.direction === 'recipient') {\n\n                        message = \"New call incoming from \" + callerID + ' @ ' + timestamp;\n                    }\n\n                    else {\n                        message = \"Calling out to \" + callerID+ ' started @ ' + timestamp;\n                    }\n                }\n\n                break;\n\n            case \"replace\":\n                    \n                //Handle replace message \n                var callState = result.data.state;\n                \n                switch (callState) {\n                    // the call represented by this state snapshot is initialized\n                    case 'trying':\n                        //Inbound\n                        if (result.data.direction === 'recipient') {\n                            message = 'Call incoming from ' + callerID + ' is trying to connect';\n                        }\n                        //Outbound\n                        else {\n                            message = 'Call out to ' + callerID + ' is trying to connect';\n                        }\n                        \n                        break;\n\n                    //the call represented by this state snapshot is ringing\n                    case 'early':\n                        message = 'Call is ringing';\n                        \n                        break;\n\n                    //the call represented by this state snapshot is answered / connected\n                    case 'confirmed':\n                        message = \"Call Connected @ \" + timestamp;\n                        break;\n\n                    //No match\n                    default:\n                        message = 'An error occurred';\n                         break;\n                    }\n\n                break;\n\n            case \"withdraw\":\n\n                console.log('Withdraw hit');\n                ///Hande Call End\n                this.setState({callEnded: true}, function (){\n                    console.log('callEnded state set to true')\n                    \n                });\n                message = 'Call ended @ ' + timestamp;\n                break;\n\n            case 'keepalive':\n                //keep alive\n                message = 'keep alive received';\n                break;\n\n            default:\n                console.log('An error occurred');\n                message = '';\n                break;\n        }\n        \n        return message;\n    }\n\n   \n    handleData() {\n\n        console.log('Message parser handling data');\n\n        var date = new Date();\n        var unixtimestamp = date.getTime();\n\n        var timestamp = this.timeConverter(unixtimestamp);\n\n        let result = JSON.parse(this.props.newMessage);\n        var message = '';\n\n        message = this.processSocketMessage(result,unixtimestamp,timestamp);\n        console.log('Message is ' + message)\n\n        //Discard message\n        if(message === '') {\n            console.log('Socket message discarded');\n        }\n\n        //Keep the message\n        else if (message !== 'keep alive received'){\n            \n            this.setState(\n                {frames: [...this.state.frames , message]}\n            );\n\n\n            if (this.state.frames.length > 10) {\n                \n                this.clearFrames();\n            }\n        }\n\n        //Keep alive\n        else {\n\n            if(this.state.keepalivesCount > 100) {\n\n                this.setState(\n                    {keepalivesCount: 0}\n                );\n            }\n            else {\n\n                this.setState(\n                    {keepalivesCount: this.state.keepalivesCount + 1}\n                );\n            }\n            \n        }\n        \n    }\n\n    render() {\n\n        var list = this.state.frames.map((item) =>\n\n            <li key={item.toString()}>{item}</li>\n        );\n\n        if (this.props.socketopen && localStorage.getItem('ws')){ \n\n            return (\n                \n                <div className='callpop'>\n                    Socket Status: Connected\n                    <CallPop ref={popref => {this.popref = popref}} callData = {list} clearPop = {this.clearFrames} callEnded = {this.state.callEnded}/>\n                </div>        \n            )\n        }\n\n        else {\n            return <p>Socket Status: Not Connected</p>\n        }\n\n        \n    };\n}\n\nexport default MessageParser;","import React from 'react';\nimport Websocket from 'react-websocket';\nimport axios from 'axios';\nimport MessageParser from './MessageParser';\n\n\nclass WebSock extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n          showSocket: false,\n          socketConnected: false,\n          currentMessage: '',\n          lineSubscribed: false,\n          retryCount: 0,\n          url: ''\n        };\n\n        this.timer = null;\n        this.keepAliveTimer= null;\n    }\n\n    subscribeLine() {\n\n        var url = localStorage.getItem('subscriptions');\n        var token = localStorage.getItem('token');\n        var lineID = localStorage.getItem('selectedLineID');\n        var accountID = localStorage.getItem('organizationID');\n        var ext = localStorage.getItem('selectedLine');\n\n        if (lineID) {\n\n            console.log('Attempting to subscribe to line ' + lineID);\n\n            var headers = {\n\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            };\n\n            var reqBody = JSON.stringify(\n                [\n                    {\n                        id : ext,\n                        type: \"dialog\",\n                        entity : {\n                            id : lineID,\n                            type: \"line\",\n                            account: accountID\n                        }\n                    }\n                ]\n            )\n\n            axios.post(url,reqBody,{headers: headers})\n            .then(response => {\n                console.log(response.data);\n                this.setState({lineSubscribed: true})\n            })\n            .catch(error => {\n                    console.log(error);\n                    //alert(\"An error occurred, Subscription request failed. Please try again later or logout from Jive\");\n                    if (error.response) {\n        \n                        return error.response;\n                    }\n                    else {\n        \n                        return error;\n                    }\n            })\n        }\n    }\n\n    getSession() {\n\n        console.log('Getting session info...');\n\n        var token = localStorage.getItem('token');\n\n        var headers = {\n            \"Authorization\": \"Bearer \" + token\n        };\n\n        return axios.post('https://realtime.jive.com/v2/session',null,{headers: headers})\n        .then(response => { \n            console.log(response)\n            return response.data;\n          })\n          \n        .catch(error => {\n            console.log(error);\n            //alert(\"An error occurred, Session request failed. Please try again later or logout from Jive\");\n            if (error.response) {\n\n                return error.response;\n            }\n            else {\n\n                return error;\n            }\n        });\n    }\n\n    handleData(data) {\n\n        // Stop 60 second timer when frame comes in\n        clearInterval(this.keepAliveTimer);\n\n        this.setState({currentMessage: data, socketConnected: true}, function (){\n            this.mpref.handleData();\n\n            //start 60 second timer AGAIN after getting last frame from socket\n            this.keepAliveTimer = setInterval(\n                () => this.checkForFrames(), 60000\n            );\n        });\n    }\n\n\n    connectSocket() {\n\n        console.log('Attempting to connect to websocket...');\n\n        //Clear the current subscription info\n        localStorage.removeItem('ws');\n        localStorage.removeItem('subscriptions');\n        localStorage.removeItem('session');\n\n        //Create new session (if line selected)\n        if(localStorage.getItem('selectedLineID')) {\n\n            this.getSession().then(data =>{\n\n                if(data.ws) {\n    \n                    localStorage.setItem('ws', data.ws);\n                    localStorage.setItem('subscriptions', data.subscriptions);\n                    localStorage.setItem('session', data.self);\n                    console.log('Session info saved on reconnect');\n    \n                    this.setState({socketConnected: true, showSocket: true, url: data.ws}, function () {\n\n                        //Create new subscription\n                        this.subscribeLine();\n\n                        this.props.toggleSocket();\n                        \n                    });\n                }\n            })\n        }\n\n        else {\n\n            console.log('No line selected, unable to connect to socket');\n        }\n        \n    }\n  \n    checkForWS(){\n\n        var ws = localStorage.getItem('ws');\n        var line = localStorage.getItem('selectedLineID');\n\n        // Check for line select\n        if (line && !ws){\n\n            this.connectSocket();\n\n            this.toggleSocket();\n        }\n\n        // If line is selecetd and ws has an address\n        if(line && ws) {\n\n            this.toggleSocket();\n        }\n\n        this.setState({retryCount: this.state.retryCount + 1}, function(){\n\n            if (this.state.retryCount === 10) {\n                this.setState({retryCount: 0}, function (){\n\n                    this.connectSocket();\n                });\n            }\n        })\n    }\n\n    checkForFrames() {\n\n        console.log('No frames for 60 seconds, requesting new session');\n        this.setState({socketConnected: false, showSocket: false, url: ''}, function() {\n\n            this.props.toggleSocket();\n\n            if(localStorage.getItem('token')){\n\n                this.connectSocket();\n            }\n        })\n    }\n\n    toggleSocket() {\n\n\n        this.setState(state => ({\n            ...state,\n            retryCount: 0,\n        }));\n\n        if (!this.state.lineSubscribed) {\n\n            this.subscribeLine()\n        }\n        \n        clearInterval(this.timer);\n\n        this.keepAliveTimer = setInterval(\n            () => this.checkForFrames(), 60000\n        );\n    }\n\n    componentDidMount() {\n\n        this.timer = setInterval(\n            () => this.checkForWS(), 5000\n        );\n    };\n\n  \n    render() {\n\n        if (this.props.socketOpen && this.state.url) { \n\n            return (\n                \n                <div className='callpop'>\n                    <Websocket url={this.state.url} onMessage={this.handleData.bind(this)} />\n                    <MessageParser ref={mpref => {this.mpref = mpref}} newMessage={this.state.currentMessage} socketopen = {this.state.showSocket}/>\n                </div>        \n            )\n        }\n\n        else {\n\n            if(localStorage.getItem('token') && localStorage.getItem('selectedLineID')){\n\n                return <p>Trying to connect socket...</p>\n            } \n\n            else {\n                return <span></span>\n            }\n        }\n    };\n}\n\nexport default WebSock;","import React from 'react';\nimport ClickToCall from './ClickToCall';\n\nclass CallBox extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state ={\n            dialString : 'none'\n        }\n\n    };\n\n    updateInputValue(evt) {\n\n        if (evt.target.value === ''){\n\n            this.setState({\n                dialString: 'none'\n            })\n\n        }\n\n        else {\n\n            this.setState({\n                dialString: evt.target.value\n            })\n        }\n\n        \n    }\n    \n    render(){\n \n        return (\n            <div className='callbox'>\n                <div className='left'>\n                    <input \n                        type='search' \n                        pattern=\"[0-9]*\"\n                        maxLength='15'\n                        placeholder='Enter number to call...'\n                        onChange={evt => this.updateInputValue(evt)}\n                    ></input>\n                </div>\n                <div className='right'>\n                    <ClickToCall dialString={this.state.dialString} fromCallBox={true}/>\n                </div>\n            </div>\n        )\n    }\n  \n  };\n  \n  export default CallBox;","import React, { Component } from 'react';\nimport logo from '../crm.png';\nimport '../App.css';\nimport Contact from './Contact';\nimport {Switch, Route} from 'react-router-dom';\nimport { Link } from 'react-router-dom'; \nimport AllContacts from './AllContacts';\nimport Settings from './Settings';\nimport Home from './Home';\nimport RedirectURI from './RedirectURI';\nimport Logout from './Logout';\nimport Login from './Login';\nimport WebSock from './WebSock';\nimport CallBox from './CallBox';\n\nclass Main extends Component {\n\n    constructor(props){\n\n        super(props);\n\n        this.state = {\n            loggedIn : false,\n            socketOpen: false\n        };\n\n        this.toggleLogin = this.toggleLogin.bind(this);\n        this.toggleSocket =  this.toggleSocket.bind(this);\n    };\n\n    toggleLogin() {\n        \n        this.setState({loggedIn: !this.state.loggedIn}, function () {});\n\n    }\n\n    toggleSocket() {\n        \n        this.setState({socketOpen: !this.state.socketOpen}, function () {});\n\n    }\n\n    componentWillMount() {\n\n        if (localStorage.getItem('token')) {\n            this.setState({loggedIn: true});\n        }\n    }\n\n    render() {\n\n        let footer;\n\n        if (this.state.loggedIn) {\n            footer = <footer className='websocket'>\n                        <WebSock toggleSocket={this.toggleSocket} socketOpen={this.state.socketOpen}></WebSock>\n                    </footer>\n        }\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <CallBox></CallBox>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <div className='links'>\n                        <Link to='/'>Home</Link>\n                        <div className='divider'/>\n                        <Link to='/contacts'>Contacts</Link>\n                        <div className='divider'/>\n                        <Link to='/settings'>Settings</Link>\n                    </div>\n                </header>\n                <div className='main'>\n                    <Switch> \n                        <Route exact path='/' component={Home}/>\n                        <Route exact path='/contacts' component={AllContacts}/> \n                        <Route \n                            exact path='/settings' \n                            render={(props) => <Settings {...props} isLoggedIn = {this.state.loggedIn} toggleLogin = {this.toggleLogin}/>}\n                        />\n                        <Route \n                            exact path='/login' \n                            render={(props) => <Login {...props} isLoggedIn = {this.state.loggedIn} />}\n                        />\n                        <Route path='/contact/:number' component={Contact}/>\n                        <Route \n                            path='/logout' \n                            render={(props) => <Logout {...props} toggleLogin = {this.toggleLogin} toggleSocket = {this.toggleSocket} socketOpen={this.state.socketOpen}/>}\n                        />\n                        <Route \n                            path='/jiveauth.php' \n                            render={(props) => <RedirectURI {...props} isLoggedIn = {this.state.loggedIn} toggleLogin = {this.toggleLogin}/>}\n                        /> \n                    </Switch> \n                </div>\n                {footer}\n            </div>\n        );\n    }\n};\n\nexport default Main;\n","import React from 'react';\nimport Main from './Main';\nimport '../App.css';\n\n\nconst App = () => (\n\n  <div className='mainapp'>\n    <Main />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}